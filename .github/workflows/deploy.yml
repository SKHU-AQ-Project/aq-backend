name: CI/CD Pipeline

on:
    push:
        branches: ['main']
    pull_request:
        branches: ['main']
        types: [opened, synchronize, reopened]

jobs:
    build:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout source code
              uses: actions/checkout@v4

            - name: Set up JDK 21
              uses: actions/setup-java@v4
              with:
                  java-version: '21'
                  distribution: 'temurin'
                  cache: gradle

            - name: Grant execute permission for gradlew
              run: chmod +x ./gradlew

            - name: Build with Gradle (Skip Tests)
              run: ./gradlew build -x test

    deploy:
        needs: build
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        runs-on: ubuntu-latest

        steps:
            - name: Checkout source code
              uses: actions/checkout@v4

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: ${{ secrets.AWS_REGION }}

            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v2

            - name: Build, tag, and push image to Amazon ECR
              env:
                  ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
                  IMAGE_TAG: ${{ github.sha }}
              run: |
                  docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
                  docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

            - name: Deploy to EC2 instance
              uses: appleboy/ssh-action@v1.0.3
              with:
                  host: ${{ secrets.EC2_HOST }}
                  username: ${{ secrets.EC2_USERNAME }}
                  key: ${{ secrets.EC2_SSH_KEY }}
                  script: |
                      # Login to ECR
                      aws ecr get-login-password --region ${{ secrets.AWS_REGION }} \
                        | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}

                      # Stop and remove old container
                      docker stop aq-backend || true
                      docker rm   aq-backend || true

                      # Pull new image
                      docker pull ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}

                      # Run new container
                      docker run -d --name aq-backend \
                        --restart unless-stopped \
                        -p 8080:8080 \
                        -e TZ=Asia/Seoul \
                        -e SPRING_PROFILES_ACTIVE=prod \
                        -e DB_HOST=${{ secrets.DB_HOST }} \
                        -e DB_USERNAME=${{ secrets.DB_USERNAME }} \
                        -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
                        -e DB_NAME=${{ secrets.DB_NAME }} \
                        -e JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }} \
                        -e JWT_ACCESS_EXPIRATION=${{ secrets.JWT_ACCESS_EXPIRATION }} \
                        -e JWT_ACCESS_HEADER=${{ secrets.JWT_ACCESS_HEADER }} \
                        -e JWT_REFRESH_EXPIRATION=${{ secrets.JWT_REFRESH_EXPIRATION }} \
                        -e JWT_REFRESH_HEADER=${{ secrets.JWT_REFRESH_HEADER }} \
                        ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}
